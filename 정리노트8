문자 처리 함수가 뭐야?
문자를 변환하거나 원하는 값으로 바꾸는 등 문자와 관련된 기능을 수행하는 일련의 함수가 문자 처리 함수지~
그러면 문자 처리 함수가 가지고 있는 기능이 뭐야?
예를 들어 문자 처리 함수는 소문자를 입력하면 대문자로 바꾸거나 대문자를 입력하면 소문자로 바꾸는 기능을 있지~

소문자를 대문자로 바꾼 예시
#include < stdio.h>

int main(void)
{
	char* pC = "c language";
	
	while (*pC)
	{
	printf("%c", *pC- 32); // 소문자의 아스키코드에서 32를 빼줘야지 대문자의 아스키코드가 된다!
	pC++;
	}

	printf("\n");
	
	return 0;
}

궁금한게 만약 입력한 문자가 대문자라면 어떡해?
대문자로 출력하려면 32를 빼지 말고 그대로 출력하면 되지~ 이럴 때는 입력받은 문자가 대문자인지 소문자인지 아스키코드를 이용하여 먼저 판단해줘야해!

번외로 대문자를 소문자로 바꾸려면 대문자의 아스키코드에서 32를 더해주면 돼

문자 처리 함수가 있다면 문자열 처리 함수도 있다는 것을 잊지마!
문자 처리 함수는 문자 하나를 입력받아서 변환된 문자를 출력하는 함수라면
문자열도 여러 가지 처리를 통해 다양하게 활용할 수 있지, 이런 문자열을 처리하는 함수가 바로 문자열 처리 함수지! 

문자열의 크기 알아내기
#include < stdio.h>

int strleng(char* ch);
int main(void)
{
	int len;
	char str[] = "c language and data structure"; // 
	len = strleng(str);
	printf("문자열의 크기는 %d다.\n", len);
	return 0;
}

int strleng(char* ch)
{
	int index;
	for (index = 0; *(ch + index) != '\0'; index ++);

	return index;
}

strleng()을 사용했는데 이게 문자열 처리 함수야?
정답이야 strleng()은 문자열을 입력받아 \0이 나오기 전까지 문자의 개수를 세는 함수이며, 반환 값으로 계산 한 문자열의 크기를 반환해주지!
우리는 이렇게 함수를 프로그래밍해도 되지만 더 편하게 쓰려면 헤더파일인 string.h 파일에 있는 문자열 처리 함수를 사용하면 돼! 

아래 문자열을 처리하는 함수 정리해놓은 것을 참고하자!
size_t strlen(const char*) > 문자열의 크기를 알아내준다 / int strcmp(const char* s1, const char* s2) > 문자열을 비교해준다
char* strcpy(char* s1, const char* s2) > 문자열을 복사해준다 / char* strcat(char* s1, const char* s2) > 문자열을 연결해준다

구조체의 멤버 변수에 접근하려면 도트(.) 연산자를 사용해야하는 것은 알겠는데 왜 사용해야 해?
도트 연산자를 구조체 멤버 연산자라고 하는데, 구조체 안의 멤버 변수들을 일반 변수처럼 접근하고 사용할 수 있게 해줘.
구조체 변수의 형식과 사용 예를 알려줄게 st.name // st.1address // st1.age 등이 있어
중간에 도트 연산자가 사용된 것을 확인할 수 있구나!!

#include <stdio.h>

struct list {
	char name;
	char gender;
	int age;
	
};

int main(void)
{
	struct list st1, st2;
	st1.name = 'T';
	st1.gender = 'M';
	st1.age = 25;

	st2.name = 'S';
	st2.gender = 'F';
	st2.age = 28;

	printf("이름 성별 나이\n");
	printf("-----------------------\n");
	printf(" %c %c %d\n", st1.name, st1.gender, st1.age);
	printf(" %c %c %d\n", st2.name, st2.gender, st2.age);

	return 0;
}

우리가 알 수 있는게 뭘까? 말해보자
struct list의 구조체 변수로 st1과 st2가 선언이 되었다!
그리고 st1과 s2의 멤버 변수들을 도트 연산자로 접근해서 사용한 것을 알 수 있지!

구조체로 선언한 객체로 할당 연산자를 이용해서 값을 저장할 수 있어~
그럼 이번엔 할당 연산자를 이용해서 st1 멤버의 값을 st2 멤버에 저장시켜보자!

#include <stdio.h>

struct list {
	char name;
	char gender;
	int age;
	
};

int main(void)
{
	struct list st1 = { 'T','M', 25 };
	struct list st2, st3 = { 'P', 'F', 30 };

	st2 = st1;
	st3.name = st1.name;
	st3.gender = st1.gender;

	printf("이름 성별 나이\n");
	printf("-----------------------\n");
	printf("st1 %c %c %d\n", st1.name, st1.gender, st1.age);
	printf("st2 %c %c %d\n", st2.name, st2.gender, st2.age);
	printf("st3 %c %c %d\n", st3.name, st3.gender, st3.age);
	
	return 0;
}

할당 연산자를 이용하니까 st1 멤버의 값을  st2에 저장할 수 있구나! 
그리고 도트 연산자로 구조체에 접근하니까 st1의 이름과 성별도 st3의 이름과 성별에 저장이 되었어!

typedef를 이용하면 재정의한 st1 처럼 stuedent 구조체를 선언하고나면 st2도 재정의 해줘야 하나?
그건 선택이야! 재정의하지 않은 struct stdent로도 선언할 수 있어!

점과 점사이의 거리를 구할 때 ROOT를 사용해야 하잖아 이것은 따로 대체할 방법이 없을까?
당연히 있지~ ROOT()  같은 기능을 수행하는 함수는 sqrt()인데, 이 함수는 헤더파일인 math.h 파일에 정의되어 있어. 따라서 쓰려면 math.h 파일을 먼저 선언해줘야 해.
한번 구조체를 이용하고 3차원 점들의 거리를 계산하는 프로그램을 짜보자!

#include <stdio.h>
#include <math.h> >> sqrt를 사용하기 위하여 math.h 파일를 선언한다!
struct ThreeDime {
	double x;
	double y;
	double z;
	
};
typedef struct ThreeDime ThreeDime;
int main(void)
{

	double D1, D2;
	ThreeDime A1, A2;
	
	printf("3차원 점 A1의 x, y, z 좌표를 입력하시오.\n");
	scanf_s("%lf %lf %lf", &A1.x, &A1.y, &A1.z);
	
	printf("\n3차원 점 A2의 x, y, z 좌표를 입력하시오.\n");
	scanf_s("%lf %lf %lf", &A2.x, &A2.y, &A2.z); // D1 : 점 A1과 원점의 거리
	
	D1 = sqrt(A1.x * A1.x + A1.y * A1.y + A1.z * A1.z); // D1 : 점 A1과 원점의 거리
	
	D2 = sqrt((A1.x - A2.x) * (A1.x - A2.x) + (A1.y - A2.y) * (A1.y - A2.y) + (A1.z - A2.z)* (A1.z - A2.z)); // D2 : 점 A1과 점 A2의 거리 

	printf("\n점 A1과 원점의 거리는 %.2lf이다.\n\n", D1);
	printf("점 A1과 점 A2의 거리는 %.2lf이다.\n", D2);
	
	return 0;
	}

3차원 좌표로 표현하여 문제를 해결하는 방법은 수학이나 공학에서 자주 사용하는데, 구조체를 이용하면 데이터를 처리할때 유용하겠네!!

열거형은 사용할때는 변수를 선언한 후 사용한다.

enum color { yellow, red, blue, green, magenta } col;
열거형 상수 리스트에 포함된 변수에는 0번부터 1씩 증가하면서 상숫값이 차례대로 붙는다 그래서 선언의 예시에서 yellow는 0이 되고 red는 1, magenta는 4가 된다.
물론 상수 리스트에 특정한 상숫값을 붙이고 싶으면 값을 할당해도 된다. blue에 5를 지정하고 싶으면 열거형을 아래와 같이 선언해주면 된다. 이러면 green은 6이 된다.
eum color { yellow, red, blue = 5, green, magenta };

열거형의 장점이라고 느낀 게 있어?
숫자로 지정하고 싶을 때 숫자를 직접 사용하는 것보다 열거형을 사용하면 프로그램을 이해하는 게 쉬어지네!

정수형 변수인 color 값에 따라서 색을 표시하도록 프로그래밍 해보자!
int color;
⋮
if(color == 0){ // 0번은 yellow를 의미한다.
⋮
}
else if(color == 1){ // 1번은 red를 의미한다.
⋮
}
else if(color == 2){ // 2번은 blue를 의미한다.
⋮
}
else if(color == 3){ // 3번은 green을 의미한다.
⋮
}
⋮

정수형 변수인 color 값에 따라서 색을 표시하도록 프로그래밍도 가능해! 하지만 프로그래머 입장에서는 번호에 해당하는 색을 알아야 프로그램을 제대로 작성할 수 있고 이해하기 쉽겠지?
그래서 이런 경우네는 color를 열거형으로 선언하는 것이 좋아.

color를 열거형으로 선언한 프로그래밍 해보자!
enum {yellow, red, blue, green, magenta} color;
⋮
if(color == yellow){
⋮
}
else if(color == red){
⋮
}
else if(color == blue){
⋮
}
else if(color == green){
⋮
}

아! 확실히 순서가 있고 새로운 값을 가지는 열거형을 이용하니까 프로그램을 이해하기 쉬워지네!
